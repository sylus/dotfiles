# -*-mode:bash-*- vim:ft=bash

# Copyright (c) 2021, Ren√©-Marc Simard (https://github.com/renemarc/dotfiles)
#
# ~/.bash_functions
# =============================================================================
# Shell functions sourced by `~/.bashrc` and `~/.zshrc`.

# shellcheck shell=bash

# General
# -----------------------------------------------------------------------------

# Extracts common file formats.
# Syntax: `extract <file1>`
# Source: https://github.com/xvoland/Extract
# TODO extract in named folder
function extract {
    if [ -z "$1" ]; then
        echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
        echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
        return 0
    fi

    for n in "$@"
    do
    if [ -f "$n" ] ; then
        case "${n%,}" in
            *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
                         tar xvf "$n"       ;;
            *.lzma)      unlzma ./"$n"      ;;
            *.bz2)       bunzip2 ./"$n"     ;;
            *.cbr|*.rar)       unrar x -ad ./"$n" ;;
            *.gz)        gunzip ./"$n"      ;;
            *.cbz|*.epub|*.zip)       unzip ./"$n"       ;;
            *.z)         uncompress ./"$n"  ;;
            *.7z|*.apk|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
                         7z x ./"$n"        ;;
            *.xz)        unxz ./"$n"        ;;
            *.exe)       cabextract ./"$n"  ;;
            *.cpio)      cpio -id < ./"$n"  ;;
            *.cba|*.ace)      unace x ./"$n"      ;;
            *.zpaq)      zpaq x ./"$n"      ;;
            *.arc)         arc e ./"$n"       ;;
            *.cso)       ciso 0 ./"$n" ./"$n.iso" && \
                              extract "$n".iso && \rm -f "$n" ;;
            *)
                         echo "extract: '$n' - unknown archive method"
                         return 1
                         ;;
        esac
    else
        echo "'$n' - file does not exist"
        return 1
    fi
    done
}
alias x=extract

# Searches history for a string, or lists all history.
# Syntax: `historysearch <string>`
function history_search() {
    if [ -z "$1" ]; then
        history
    else
        history | grep "$1"
    fi
}

# Searches session history for a string, or lists all session history.
# Syntax: `history_session_search <string>`
function history_session_search() {
    prefix=$(date +"$HISTTIMEFORMAT")
    offset=$((8 + ${#prefix}))
    comm -23 <(history | cut -c ${offset}-) "${HISTFILE:-'~/.bash_history'}" | grep "$1"
}

# Creates a directory and changes to it.
# Syntax: `mkcd <directory>`
function mkcd() {
    if [ -z "$1" ]; then
        echo "Usage: mkcd <path>"
        echo "Help: mkcd creates a directory if it doesn't exist, then changes to it."
        return 0
    fi

    mkdir -p -- "$@" && cd -P -- "$_" || exit;
}
alias take=mkcd

# Repeats a command a set number of times.
# Syntax: `repeat <count> <command>`
function repeat() {
    if [ -z "$1" ] || [ "$#" -lt 2 ]; then
        echo "Usage: repeat <count> <command> ..."
        echo "Help: repeat runs a command x number of times."
        return $#
    fi

    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do
        eval "$@";
    done
}
alias r=repeat


# Sysadmin
# -----------------------------------------------------------------------------

# Keeps all apps and packages up to date.
# Syntax: `update [all]`
function update() {
    if command -v softwarepudate &> /dev/null; then
        echo 'Checking for system updates...'
        softwareupdate -l -i -a
    fi

    if command -v brew &> /dev/null; then
        echo 'Updating packages with Homebrew/Linuxbrew...'
        brew update
        brew upgrade
        brew cask update
        brew cleanup
    fi

    if [[ "$1" == 'all' ]]; then
        if command -v mas &> /dev/null; then
            echo 'Updating App Store applications...'
            mas upgrade
        fi
    fi

    if ! [[ "$OSTYPE" =~ ^darwin ]]; then
        if command -v apt &> /dev/null; then
            echo 'Updating packages with apt...'
            apt update
            apt full-upgrade
            apt autoremove
            apt clean
            apt autoclean
        fi

        if command -v apt-get &> /dev/null; then
            echo 'Updating packages with apt-get...'
            apt-get update
            apt-get upgrade
            apt-get dist-upgrade
        fi
    fi

    if command -v npm &> /dev/null; then
        echo 'Updating Node.js packages with npm...'
        which npm
        npm update -g
    fi

    if command -v npm &> /dev/null; then
        echo 'Updating Ruby gems...'
        which gem
        gem update --system
        gem update
        gem cleanup
    fi
}


# Applications
# -----------------------------------------------------------------------------

# Opens file/URL in Microsoft Edge.
# Syntax: `microsoft-edge <url>`
if [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    function microsoft-edge() {
        start microsoft-edge:"$1"
    }
fi


# Development
# -----------------------------------------------------------------------------

# Calls Python's pip3 at the global level.
if command -v pip3 > /dev/null; then
    function gpip3() {
        PIP_REQUIRE_VIRTUALENV="0" pip3 "$@"
    }
fi


# Misc
# -----------------------------------------------------------------------------

# Copies contents to the clipboard.
function cb() {
    if [ -z "$1" ]; then
        echo "Usage: cb <path>"
        echo "Help: cb copies a file contents to the clipboard."
        return 0
    fi

    if command -v pbcopy > /dev/null; then
        pbcopy < "$1"
    elif command -v xclip > /dev/null; then
        xclip -selection clipboard < "$1"
    elif command -v xsel > /dev/null; then
        xsel -ib < "$1"
    elif command -v clipboard > /dev/null; then # node.js clipboard-cli
        clipboard < "$1"
    elif command -v clip > /dev/null; then
        clip < "$1"
    elif command -v powershell > /dev/null; then
        powershell -NoProfile -Command "Set-Clipboard"
    fi
}

# WSL
# -----------------------------------------------------------------------------

# Fix WSL interop error.
fix_wsl2_interop() {
    for i in $(pstree -np -s $$ | grep -o -E '[0-9]+'); do
        if [[ -e "/run/WSL/${i}_interop" ]]; then
            export WSL_INTEROP=/run/WSL/${i}_interop
        fi
    done
}
